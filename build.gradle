import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {

    }
}

plugins {
    id 'idea'
    id 'jacoco'
    id "net.researchgate.release" version "2.8.1"
    id "com.palantir.docker" version "0.25.0"
    id "org.sonarqube" version "2.8"
    id 'maven-publish'
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"

java {
    withSourcesJar()
}

group 'br.com.vfc'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    implementation "org.owasp:security-logging-log4j:${securityLoggingVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    testImplementation "junit:junit:4.13"

}

processResources {
    filesMatching("**/log4j2.xml") {
        expand project.properties
    }
}

docker {
    def newVersion = version.toString()
    if (newVersion.endsWith("SNAPSHOT")) {
        newVersion = version.toString() + "-" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddhhmm"))
    }

    name "dockerhum.com/vfcarmo/${jar.archiveBaseName.get()}:${newVersion}"
    dockerfile file("docker/Dockerfile")

    files(jar.archiveFile,
            "$projectDir/docker/app.conf")

    buildArgs(["JAR_FILE": jar.archiveFileName.get()])
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

}

runBuildTasks.dependsOn jar
afterReleaseBuild.dependsOn publish
afterReleaseBuild.dependsOn dockerPush